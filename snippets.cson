# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# http://flight-manual.atom.io/using-atom/sections/basic-customization/#_cson
'.source.js':
    'findIndex':
        'prefix': 'index'
        'body': 'let unitIndex = pop.findIndex((obj => obj.id == unitId));'

    'filterSortLoop':
        'prefix': 'loopPop'
        'body': """
        let ownPopHere = _.filter(pop, function(unit) {
            return (unit.tileId == tileId && unit.player === pseudo);
        });
        let sortedOwnPopHere = _.sortBy(ownPopHere,'follow');
        sortedOwnPopHere.forEach(function(unit) {

        });
        """
    'loopProperty':
        'prefix': 'loopProp'
        'body': """
        Object.keys(ter[3]).forEach(function(key,index) {
            console.log(key);
        });
        """




# let ownPopHere = _.filter(pop, function(unit) {
#     return (unit.tileId == tileId && unit.player === pseudo);
# });
# let sortedOwnPopHere = _.sortBy(ownPopHere,"follow");
# sortedOwnPopHere.forEach(function(unit) {
#
# });
